#!/usr/bin/python3
#
# Test that CPU hotplug minimally works and doesn't pop any warnings in dmesg

import os
import sys
sys.path.append(f'{os.path.dirname(sys.argv[0])}/../../lib')

from qemu import QemuConfig, qemu_main, qemu_supports_p10, kvm_or_tcg
from utils import setup_logging, test_harness
from pexpect_utils import xmon_enter, xmon_exit


def test(name, cpu, machine):
    qconf = QemuConfig(machine)
    qconf.configure_from_env()
    qconf.smp = 2
    qconf.cpu = cpu
    qconf.host_mounts = []
    qconf.accel = kvm_or_tcg(machine, cpu)

    if os.environ.get('QEMU_QUIET', None) is None:
        qconf.quiet = True

    qconf.callbacks.append(test_cpuhotplug)
    qconf.apply_defaults()

    if cpu == 'POWER10' and not qemu_supports_p10(qconf.qemu_cmd):
        return None

    return qemu_main(qconf)


def test_cpuhotplug(qconf, p):
    # Check we have 2 CPUs online
    p.send('grep -H . /sys/devices/system/cpu/cpu*/online')
    p.expect('/sys/devices/system/cpu/cpu0/online:1')
    p.expect('/sys/devices/system/cpu/cpu1/online:1')
    p.expect_prompt()

    for n in [0, 1]:
        # Offline a cpu
        p.cmd(f'echo 0 > /sys/devices/system/cpu/cpu{n}/online')

        # Check it's offline
        p.send(f'grep -H . /sys/devices/system/cpu/cpu{n}/online')
        p.expect(f'/sys/devices/system/cpu/cpu{n}/online:0')
        p.expect_prompt()

        # Bring it back online
        p.cmd(f'echo 1 > /sys/devices/system/cpu/cpu{n}/online')

        # Check it's online again
        p.send(f'grep -H . /sys/devices/system/cpu/cpu{n}/online')
        p.expect(f'/sys/devices/system/cpu/cpu{n}/online:1')
        p.expect_prompt()

    # Offline cpu 0
    p.cmd(f'echo 0 > /sys/devices/system/cpu/cpu0/online')

    # Offline cpu 1 (should fail)
    p.send(f'echo 0 > /sys/devices/system/cpu/cpu1/online')
    p.expect('Device or resource busy')
    p.expect_prompt()


def main():
    setup_logging()

    cpus = os.environ.get('CPUS', 'POWER8:POWER10').split(':')
    machines = os.environ.get('QEMU_MACHINES', 'pseries:powernv').split(':')

    rc = True
    for machine in machines:
        for cpu in cpus:
            rc &= test_harness(test, 'cpu_hotplug', cpu=cpu, machine=machine)

    return rc


sys.exit(0 if main() else 1)
