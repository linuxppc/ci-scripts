#!/usr/bin/python3
#
# $ cd ~/src/linux
# $ make
# $ ~/src/ci-scripts/scripts/boot/qemu-pseries
#
# Or:
#
# export VMLINUX_PATH=~/src/linux/vmlinux
# export KERNEL_RELEASE_PATH=~/src/linux/include/config/kernel.release
#
# Optional:
# export QEMU_SYSTEM_PPC64=~/src/qemu/ppc64-softmmu/qemu-system-ppc64
#
# export CPU=(POWER8|POWER9)    # Default POWER8
# export ACCEL=(tcg|kvm)        # Default tcg
# export SMP=n                  # Default 2 for tcg or 8 for kvm
#
# export ROOT_DISK_PATH=~/some/directory
# Expects ppc64[le]-rootfs.cpio.gz in ROOT_DISK_PATH

import logging
import os, sys, atexit
from subprocess import check_call
sys.path.append(f'{os.path.dirname(sys.argv[0])}/../../lib')

from qemu import *
from pexpect_utils import *
from utils import *


def main():
    setup_logging()

    expected_release = get_expected_release()
    if expected_release is None:
        return False

    vmlinux = get_vmlinux()
    if vmlinux is None:
        return False

    cpu = get_env_var('CPU', 'POWER8')
    accel = get_env_var('ACCEL', 'tcg')

    smp = get_env_var('SMP', None)
    if smp is None:
        if accel == 'tcg':
            smp = 2
        else:
            smp = 8

    cmdline = 'noreboot'

    cloud_image = os.environ.get('CLOUD_IMAGE', False)
    if cloud_image:
        setup_timeout(600)

        # Create snapshot image
        rdpath = get_root_disk_path()
        src = f'{rdpath}/{cloud_image}'
        pid = os.getpid()
        dst = f'{rdpath}/qemu-temp-{pid}.img'
        cmd = f'qemu-img create -f qcow2 -F qcow2 -b {src} {dst}'.split()
        check_call(cmd)

        atexit.register(lambda: os.unlink(dst))

        if 'ubuntu' in cloud_image:
            cmdline += ' root=/dev/vda1'
            prompt = 'root@ubuntu:~#'
        else:
            cmdline += ' root=/dev/vda2'
            prompt = '\[root@fedora ~\]#'

        drive = f'-drive file={dst},format=qcow2,if=virtio ' \
                f'-drive file={rdpath}/cloud-init-user-data.img,if=virtio,format=raw,readonly=on'
    else:
        setup_timeout(120)
        drive = None

    p = PexpectHelper()
    cmd = qemu_command(vmlinux=vmlinux, cpu=cpu, mem='4G', drive=drive,
                       net='-nic user,model=virtio-net-pci',
                       accel=accel, smp=smp, cmdline=cmdline)
    p.spawn(cmd, logfile=open('console.log', 'w'))

    if cloud_image:
        standard_boot(p, prompt=prompt, login=True, password='linuxppc', timeout=300)
    else:
        standard_boot(p)

    p.send("echo -n 'booted-revision: '; uname -r")
    p.expect(f'booted-revision: {expected_release}')
    p.expect_prompt()

    p.send('cat /proc/cpuinfo')
    p.expect("IBM pSeries \(emulated by qemu\)")
    p.expect_prompt()

    if os.environ.get('QEMU_NET_TESTS', True) != '0':
        qemu_net_setup(p)
        ping_test(p)
        wget_test(p)

    p.send('halt')
    p.wait_for_exit()

    if filter_log_warnings(open('console.log'), open('warnings.txt', 'w')):
        logging.error('Errors/warnings seen in console.log')
        return False

    logging.info('Test completed OK')

    return True


sys.exit(0 if main() else 1)
