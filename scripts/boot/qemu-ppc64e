#!/usr/bin/python3
#
# Kernel needs:
#   CONFIG_PPC_QEMU_E500=y
#   CONFIG_POWER_RESET_GPIO=y
#
# $ cd ~/src/linux
# $ make
# $ ~/src/ci-scripts/scripts/boot/qemu-ppc64e
#
# Or:
#
# export VMLINUX_PATH=~/src/linux/vmlinux
# export KERNEL_RELEASE_PATH=~/src/linux/include/config/kernel.release
#
# Optional:
# export QEMU_SYSTEM_PPC64=~/src/qemu/ppc64-softmmu/qemu-system-ppc64
# export ROOT_DISK_PATH=~/some/directory
#
# Expects ROOT_DISK_PATH to contain either:
#   ppc64-novsx-rootfs.cpio.gz
# or
#   ppc-rootfs.cpio.gz
#
# if COMPAT_USERSPACE is set.

import logging
import os, sys
sys.path.append(f'{os.path.dirname(sys.argv[0])}/../../lib')

from qemu import qemu_command, qemu_net_setup
from pexpect_utils import *
from utils import *


def main():
    setup_logging()
    setup_timeout(60)

    expected_release = get_expected_release()
    if expected_release is None:
        return False

    vmlinux = get_vmlinux()
    if vmlinux is None:
        return False

    if os.environ.get('COMPAT_USERSPACE', False):
        initrd = 'ppc-rootfs.cpio.gz'
    else:
        initrd = 'ppc64-novsx-rootfs.cpio.gz'

    p = PexpectHelper()
    cmd = qemu_command(vmlinux=vmlinux, machine='ppce500', cpu='e5500',
                       mem='4G', initrd=initrd, cmdline='noreboot')
    p.spawn(cmd, logfile=open('console.log', 'w'))

    standard_boot(p)

    p.send("echo -n 'booted-revision: '; uname -r")
    p.expect(f'booted-revision: {expected_release}')
    p.expect_prompt()

    p.send('cat /proc/cpuinfo')
    p.expect("QEMU ppce500")
    p.expect_prompt()

    qemu_net_setup(p)
    ping_test(p, check=False)
    wget_test(p)

    p.send("echo o > /proc/sysrq-trigger")
    p.wait_for_exit()

    if filter_log_warnings(open('console.log'), open('warnings.txt', 'w')):
        logging.error('Errors/warnings seen in console.log')
        return False

    logging.info('Test completed OK')

    return True


sys.exit(0 if main() else 1)
